struct lca_tree{
    int N, LG;
    vector<vector<int>> adj, par;
    vector<int> dis;

    lca_tree(int n){
        N = n;
        LG = log2(n) + 1;
        adj.resize(n + 5);
        par.resize(LG, vector<int> (n + 5, 0));
        dis.resize(n + 5, 0);
        for(int i = 0; i < n - 1; i++){
            int x, y; cin >> x >> y;
            adj[x].push_back(y);
            adj[y].push_back(x);
        }
    }

    void dfs(int x, int p){
        par[0][x] = p;
        dis[x] = dis[p] + 1;
        for(int &i: adj[x]){
            if(i == p)  continue;
            dfs(i, x);
        }
    }

    void pre(){
        for(int i = 1; i < LG; i++){
            for(int j = 1; j <= N; j++){
                if(!par[i - 1][j])  continue;
                par[i][j] = par[i - 1][par[i - 1][j]];
            }
        }
    }

    void init(int root = 1){
        dfs(1, 0);
        pre();
    }

    int jump(int u, int h){
        for(int i = LG - 1; i >= 0; i--){
            if(h & (1 << i)){
                u = par[i][u];
            }
        }
        return u;
    }

    int LCA(int u, int v){
        if(dis[u] < dis[v]) swap(u, v);
        u = jump(u, dis[u] - dis[v]);
        if(u == v)  return u;
        for(int i = LG - 1; i >= 0; i--){
            if(par[i][u] && par[i][u] != par[i][v]){
                u = par[i][u];
                v = par[i][v];
            }
        }
        return par[0][u];
    }

    int dist(int u, int v){
        return dis[u] + dis[v] - 2 * dis[LCA(u, v)];
    }
};
