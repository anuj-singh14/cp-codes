//attribution : https://github.com/Ashishgup1/Competitive-Coding/blob/master/Trie.cpp

//call prep() in main() before usage
int MX = 30;    //number of bits of max value to be inserted

typedef struct data
{
    data* bit[2];
    int cnt = 0;
}trie;

trie* head;

void insert(int x)
{
    trie* cur = head;
    for(int i=30;i>=0;i--)
    {
        int b = (x>>i) & 1;
        if(!cur->bit[b])
            cur->bit[b] = new trie();
        cur = cur->bit[b];
        cur->cnt++;
    }
}

void remove(int x)
{
    trie* cur = head;
    for(int i=30;i>=0;i--)
    {
        int b = (x>>i) & 1;
        cur = cur->bit[b];
        cur->cnt--;
    }
}

int maxxor(int x)
{
    trie* cur = head;
    int ans = 0;
    for(int i=30;i>=0;i--)
    {
        int b = (x>>i)&1;
        if(cur->bit[!b] && cur->bit[!b]->cnt>0)
        {
            ans += (1LL<<i);
            cur = cur->bit[!b];
        }
        else
            cur = cur->bit[b];
    }
    return ans;
}

int minxor(int x)
{
    trie* cur = head;
    int ans = 0;
    for(int i=30;i>=0;i--)
    {
        int b = (x>>i)&1;
        if(cur -> bit[b] != NULL && cur -> bit[b] -> cnt > 0)
            cur = cur -> bit[b];
        else{
            ans |= 1 << i;
            cur = cur -> bit[!b];
        }
    }
    return ans;
}

void prep(){
    head = new trie();
    insert(0);
}
