//call prep() in main() before usage
int MX = 30;    //number of bits of max value to be inserted

typedef struct data{
    data *nxt[2];
    int cnt = 0;
    data(){
        frw(i, 0, 2)    nxt[i] = NULL;
    }
}trie;

trie *head;

void insert(int n){
    trie *curr = head;
    bck(i, MX, -1){
        int ind = n >> i & 1;
        if(!curr -> nxt[ind])
            curr -> nxt[ind] = new trie();
        curr = curr -> nxt[ind];
        curr -> cnt++;
    }    
}

void remove(int n){
    trie *curr = head;
    bck(i, MX, -1){
        int ind = n >> i & 1;
        curr = curr -> nxt[ind];
        curr -> cnt--;
    }
}

int maxxor(int n){
    trie *curr = head;
    int ans = 0;
    bck(i, MX, -1){
        int ind = n >> i & 1;
        if(curr -> nxt[!ind] && curr -> nxt[!ind] -> cnt){
            ans |= 1 << i;
            curr = curr -> nxt[!ind];
        }
        else
            curr = curr -> nxt[ind];
    }
    return ans;
}

int minxor(int n){
    trie *curr = head;
    int ans = 0;
    bck(i, MX, -1){
        int ind = n >> i & 1;
        if(curr -> nxt[ind] && curr -> nxt[ind] -> cnt)
            curr = curr -> nxt[ind];
        else{
            ans |= 1 << i;
            curr = curr -> nxt[!ind];
        }
    }
    return ans;
}

void prep(){
    head = new trie();
    insert(0);
}


//trie for strings
typedef struct data{
    data *nxt[26];
    int wt = 0, cnt = 0;
    data(){
        frw(i, 0, 26)   nxt[i] = NULL;
    }
}trie;

trie *head;

void insert(string s, int wt){
    trie *curr = head;
    for(auto i : s){
        int ind = i - 'a';
        if(!curr -> nxt[ind])
            curr -> nxt[ind] = new trie();
        curr = curr -> nxt[ind];
        curr -> wt = max(curr -> wt, wt);
        curr -> cnt++;
    }
}

void remove(string s){
    trie *curr = head;
    for(auto i : s){
        int ind = i - 'a';
        curr = curr -> nxt[ind];
        curr -> cnt--;
    }
}

int get(string s){
    trie *curr = head;
    for(auto i : s){
        int ind = i - 'a';
        if(!curr -> nxt[ind])    return -1;
        curr = curr -> nxt[ind];
    }
    return curr -> wt;
}

void prep(){
    head = new trie();
    insert("", 0);
}

