vector<int> a;

struct node{
    int sum;    //store data appropriately
    node(int _s = 0){
        sum = _s;
    }
};

struct segtree{
    #define left root * 2
    #define right left + 1
    #define mid (s + e) / 2

    int N;
    vector<node> tree;

    segtree(int n = 1e5){
        init(n);
    }

    void init(int n){
        N = n;
        n += 5;
        tree.resize(4 * n);
    }
    
    node combine(node a, node b){
        return node(a.sum + b.sum);
    }

    void build(int root, int s, int e){
        if(s == e){
            tree[root] = node(a[s]);
            return;
        }
        build(left, s, mid);
        build(right, mid + 1, e);
        tree[root] = combine(tree[left], tree[right]);
    }

    void update(int root, int s, int e, int id, int val){
        if(id < s || id > e)    return;
        if(s == e){
            tree[root] = node(val);
            return;
        }
        if(id <= mid)   update(left, s, mid, id, val);
        else            update(right, mid + 1, e, id, val);
        tree[root] = combine(tree[left], tree[right]);
    }

    node query(int root, int s, int e, int l, int r){
        if(r < s || e < l)      return node();
        if(s >= l && r >= e)    return tree[root];
        node a = query(left, s, mid, l, r);
        node b = query(right, mid + 1, e, l, r);
        return combine(a, b);
    }
    
    void build(){
        build(1, 1, N);
    }
    
    void update(int id, int val){
        update(1, 1, N, id, val);
    }

    node query(int l, int r){
        return query(1, 1, N, l, r);
    }
    #undef left
    #undef right
    #undef mid
};
