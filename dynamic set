/*
Dynamic set implementation
Functions:
inc(x) : increase occurence of x by 1
dec(x) : decrease occurence of x by 1
most_freqent() : return most frequent element, if multiple then 
                 least among them
least_frequent() : return least freqent element, if multiple then
                   greatest among them
*/

#define pii pair<int, int>

struct comp{
    bool operator() (pii a, pii b) const {
        if(a.first == b.first)    return a.second > b.second;
        return a.first < b.first;
    }
};

struct dset{
    map<int, int> m;
    set<pii> s1, s2;
    multiset<int> elems;

    void inc(int x){
        elems.insert(x);
        if(m.count(x)){
            int fr = m[x];
            auto k1 = s1.find({x, fr}); s1.erase(k1);
            auto k2 = s2.find({fr, x}); s2.erase(k2);
            ++fr;
            s1.insert({x, fr});
            s2.insert({fr, x});
        }
        else{
            s1.insert({x, 1});
            s2.insert({1, x});
        }
        m[x]++;
    }

    void dec(int x){
        if(!m.count(x)) return;
        elems.erase(elems.find(x));
        int fr = m[x];
        auto k1 = s1.find({x, fr}); s1.erase(k1);
        auto k2 = s2.find({fr, x}); s2.erase(k2);
        --fr;
        if(fr == 0) return;
        s1.insert({x, fr});
        s2.insert({fr, x});
    }

    int most_freqent(){
        if(s1.empty())  return -1;
        return (*s2.rbegin()).first;
    }

    int least_frequent(){
        if(s1.empty())  return -1;
        return (*s2.begin()).second;
    }
};
