const int MAX = 1e5 + 5;
const int LIM = 4e5 + 5;        

vi a(MAX), seg(LIM);

int combine(int &a, int &b) {
	return __gcd(a, b);
}

void build(int node, int i, int j) {
	if (i == j) {
		//base case : leaf node information to be stored here
		seg[node] = a[i];
		return ;
	}
	int mid = (i + j) / 2;
	build(node*2, i, mid);
	build(node*2 + 1, mid + 1, j);
	seg[node] = combine(seg[2*node], seg[2*node+1]);
}

void update(int node, int i, int j, int x, int y) {
	if (i > x || j < x) {
		return ;
	}
	if (i == j) {
		//base case : leaf node information to be stored here
		seg[node] = y;
		return ;
	}
	int mid = (i + j) / 2;
	update(node*2, i, mid, x, y);
	update(node*2 + 1, mid + 1, j, x, y);
	seg[node] = combine(seg[2*node], seg[2*node+1]);
}

int query(int node, int i, int j, int l, int r) {
	if (l <= i && j <= r) {
		return seg[node];
	}
	int mid = (i + j) / 2;
	if (l <= mid) {
		if (r <= mid) {
			return query(node*2, i, mid, l, r);
		}
		else {
			int a = query(node*2, i, mid, l, r);
			int b = query(node*2 + 1,  mid + 1, j, l, r);
			return combine(a, b);
		}
	}
	else {
		return query(node*2 + 1,  mid + 1, j, l, r);
	}
}
