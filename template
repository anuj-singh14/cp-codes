#include<bits/stdc++.h>
using namespace std ;
#define umap unordered_map
#define uset unordered_set 
#define sz(a) ll((a).size())
#define mem(a,x) memset((a),(x),sizeof(a))
#define pub push_back
#define in insert
#define tez ios_base::sync_with_stdio(false) ; cin.tie(NULL) ; cout.tie(NULL) ;
#define prf fixed<<setprecision
#define fi first
#define se second
#define endl '\n'
#define t() ll _T ; cin >> _T ; while(_T--)
#define frw(i, a, b) for(ll (i) = (a) ; (i) < (b) ; (i)++)
#define bck(i, a, b) for(ll (i) = (a) ; (i) > (b) ; (i)--)
#define all(a) (a).begin(),(a).end()
#define rall(a) (a).rbegin(),(a).rend()
#define nl cout<<'\n' ;
#define sq(x) (x) * (x)
#define pow fuckthisshit
#define ceil ceiling
#define gcd __gcd
#define CSB __builtin_popcountll
#define lob lower_bound
#define upb upper_bound
typedef long double ld ;
typedef long long ll ;
typedef unsigned long long ull ;
typedef vector<ll> vll ;
typedef vector<vll> vvll ;
typedef vector<string> vss ;
typedef vector<char> vch ;
typedef vector<bool> vbool ;
typedef pair<ll, ll> pll ;
typedef pair<ll, pll> plll ;
typedef vector<pll> vpll ;
const ll INF = 6e15 ;
const ll MOD = 1e9 + 7 ;
const ll N = 1e6 + 5 ;

//for debugging variable no. of parameters
//trace(a, b, .....) ;
#define trace(...) ZZ(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1> 
void ZZ(const char* name, Arg1&& arg1){
	std::cerr << name << " = " << arg1 << endl;
}
template <typename Arg1, typename... Args>
void ZZ(const char* names, Arg1&& arg1, Args&&... args){
	const char* comma = strchr(names + 1, ',');
	std::cerr.write(names, comma - names) << " = " << arg1;
	ZZ(comma, args...);
}

//ceil(a/b)
ll ceil(ll a, ll b){return (a + b - 1) / b ;} 
ll pow(ll x, ll y){if(y == 0)  return 1 ; return x * pow(x, y - 1) ;}

ll add(ll a, ll b){
	a += b ;
	if(a >= MOD)	a -= MOD ;
	return a ;
}
 
ll sub(ll a, ll b){
	a %= MOD ;
	b %= MOD ;
	a -= b ;
	if(a < 0)	a += MOD ;
	return a ;
}
 
ll mulmod(ll a, ll b, ll m) {
	ll q = (ll)(((ld)a*(ld)b)/(ld)m);
	ll r = a*b - q*m ;
	return (r < 0)? r+m : r%m ;
}
 
ll fpow(ll x, ll y, ll p){
	ll res = 1 ;
	while(y > 0){
		if(y & 1)	res = mulmod(res, x, p) ;
		x = mulmod(x, x, p) ;
		y >>= 1 ;
	}
	return res ;
}

int main(){
	tez
}
