const int N = 1e5 + 5;
const int LG = 20; //log2(N) + 1

int n;
vector<int> adj[N], level(N, 0), sub(N, 0);
vector<vector<int>> par(LG, vector<int> (N, 0));

void dfs(int x, int p){
    par[0][x] = p;
    level[x] = level[p] + 1;
    sub[x] = 1;
    for(int i : adj[x]){
        if(i == p)  continue;
        dfs(i, x);
        sub[x] += sub[i];
    }
}

void pre(){
    for(int i = 1; i < LG; i++){
        for(int j = 1; j <= n; j++){
            if(!par[i - 1][j])  continue;
            par[i][j] = par[i - 1][par[i - 1][j]];
        }
    }
}

int jump(int u, int h){
    for(int i = LG - 1; i >= 0; i--){
        if(h & (1 << i)){
            u = par[i][u];
        }
    }
    return u;
}

int LCA(int u, int v){
    if(level[u] < level[v]) swap(u, v);
    u = jump(u, level[u] - level[v]);
    if(u == v)  return u;
    for(int i = LG - 1; i >= 0; i--){
        if(par[i][u] && par[i][u] != par[i][v]){
            u = par[i][u];
            v = par[i][v];
        }
    }
    return par[0][u];
}
