const int N = 3e5 + 5;
const int LG = 20; //log2(N) + 1

int n, q;
ll level[N], sub[N];
int par[LG][N];
vi adj[N];

void dfs0(int x, int p){
	par[0][x] = p;
	level[x] = level[p] + 1;
	sub[x] = 1;
	for(int i : adj[x]){
		if(i == p)	continue;
		dfs0(i, x);
		sub[x] += sub[i];
	}
}

void pre(){
	frw(i, 1, LG){
		frw(j, 1, n + 1){
			if(par[i - 1][j]){
				par[i][j] = par[i - 1][par[i - 1][j]];
			}
		}
	}
}

int jump(int u, ll h){
	bck(i, LG - 1, -1){
		if(h & (1 << i)){
			u = par[i][u];
		}
	}
	return u;
}

int LCA(int u, int v){
	if(level[u] < level[v])	swap(u, v);
	ll diff = level[u] - level[v];
	u = jump(u, diff);
	if(u == v)	return u;
	bck(i, LG - 1, -1){
		if(par[i][u] && par[i][u] != par[i][v]){
			u = par[i][u];
			v = par[i][v];
		}
	}
	return par[0][u];
}
