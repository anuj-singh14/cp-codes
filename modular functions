const int MOD = 1e9 + 7;

int add(int a, int b, int m = MOD){
    a += b;
    if(a >= m)    a -= m;
    return a;
}

int sub(int a, int b, int m = MOD){
    return add(a, m - b);
}

int mult(int a, int b, int m = MOD){
    a %= m, b %= m;
    return 1ll * a * b % m;
}

int fpow(int x, int y, int m = MOD){
    int res = 1;
    if(y < 0)   y += MOD - 1;   //only if MOD is prime
    while(y > 0){
        if(y & 1)   res = mult(res, x);
        x = mult(x, x);
        y >>= 1;
    }
    return res;
}

int inv(int a, int md = MOD){
    a %= md;
    if(a < 0)   a += md;
    int b = md, u = 0, v = 1;
    while(a){
        int t = b / a;
        b -= t * a; swap(a, b);
        u -= t * v; swap(u, v);
    }
    if(u < 0)   u += md;
    return u;
}

const int N = 1e5 + 5;

vi fac(N, 1), ifac(N, 1);

int ncr(int n, int r){
    if(r > n)   return 0;
    return mult(fac[n], mult(ifac[r], ifac[n - r]));
}

void precomp(){
    frw(i, 2, N)    fac[i] = mult(fac[i - 1], i);
    ifac[N - 1] = inv(fac[N - 1]);
    bck(i, N - 2, 0)    ifac[i] = mult(ifac[i + 1], i + 1);
}
