//linear sieve algo from https://cp-algorithms.com/algebra/prime-sieve-linear.html
//time complexity : O(N)
const ll N = 1e6 + 5 ;
vll pr ;
vll lp(N, 0) ;

void precomp(){
    lp[1] = 1 ;
    frw(i, 2, N){
        if(!lp[i]){
            lp[i] = i ;
            pr.pub(i) ;
        }
        for(ll j = 0 ; j < sz(pr) and pr[j] <= lp[i] and i * pr[j] < N ; j++){
            lp[i * pr[j]] = pr[j] ;
        }
    }
}

//function to generate prime factorization of a number in O(logn)
umap<ll,ll> fac(ll n){
    umap<ll,ll> m ;
    while(n != 1){
        m[lp[n]] ++ ;
        n /= lp[n] ;
    }
    return m ;
}

void pre()
{
    for ( int i = 1; i <= 1000000; i++ ) {
        for ( int j = i; j <= 1000000; j += i ) cnt[j]++;
    }
    return;
}
