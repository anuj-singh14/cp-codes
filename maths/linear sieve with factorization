//linear sieve algo from https://cp-algorithms.com/algebra/prime-sieve-linear.html
//time complexity : O(N)
const int N = 1e6 + 5;

vi pr, lp(N, 0) ;

void precomp(){
    frw(i, 2, N){
        if(!lp[i]){
            lp[i] = i;
            pr.pub(i);
        }
        for(auto j : pr){
            if(j > lp[i] || i * j >= N)	break;
            lp[i * j] = j;
        }
    }
}

//nlog(logn)
void precomp(){
	lp[1] = lp[0] = 0;
	frw(i, 2, N){
		if(lp[i])	continue;
		lp[i] = i;
		for(ll j = 1ll * sq(i); j < 1ll * N; j += i){
			if(lp[j])	continue;
			lp[j] = i;
		}
	}
}

//function to generate prime factorization of a number in O(logn)
umap<ll,ll> fac(ll n){
    umap<ll,ll> m ;
    while(n != 1){
        m[lp[n]] ++ ;
        n /= lp[n] ;
    }
    return m ;
}

void pre()
{
    for ( int i = 1; i <= 1000000; i++ ) {
        for ( int j = i; j <= 1000000; j += i ) cnt[j]++;
    }
    return;
}
