#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define int long long
#define ld long double
#define vi vector<int>
#define umap unordered_map
#define pii pair<int, int>
#define vpii vector<pii>
#define uset unordered_set
#define frw(i, a, b) for(auto i = (a); i < (b); i++)
#define bck(i, a, b) for(auto i = (a); i > (b); i--)
#define T() int testcases; cin >> testcases; frw(TC, 1, testcases + 1)
#define tez ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define endl "\n"
#define fi first
#define se second
#define pow asdihagsiduh
#define pub push_back
#define in insert
#define all(a) a.begin(), a.end()
#define rall(a) a.rbegin(), a.rend()
#define sz(a) (int)(a.size())
#define sq(a) ((a) * (a))

#define trace(...) ZZ(#__VA_ARGS__, __VA_ARGS__)
template<typename Arg1> 
void ZZ(const char* name, Arg1&& arg1){
	cerr << name << " = " << arg1 << endl;
}
template<typename Arg1, typename... Args>
void ZZ(const char* names, Arg1&& arg1, Args&&... args){
	const char* comma = strchr(names + 1, ',');
	cerr.write(names, comma - names) << " = " << arg1;
	ZZ(comma, args...);
}

//console o/p without variable names
#define trace1(...) ZZ(__VA_ARGS__)
template<typename Arg1>
void ZZ(Arg1&& arg1){
	cerr << arg1 << endl;
}
template<typename Arg1, typename... Args>
void ZZ(Arg1&& arg1, Args&&... args){
	cerr << arg1 << ' ';
	ZZ(args...);
}

const int N = 2e5 + 5;

vi par(N), siz(N, 0);

void init(int n){
	frw(i, 1, n + 1){   
		par[i] = i;
		siz[i] = 1;
	}
}

int find(int x){
	return par[x] = (par[x] == x) ? x : find(par[x]);
}

bool same(int x, int y){
	return find(x) == find(y);
}

void merge(int x, int y){
	x = find(x);
	y = find(y);
	if(x == y)  return;
	if(siz[x] < siz[y])   swap(x, y);
	par[y] = x;
	siz[x] += siz[y];
	siz[y] = 0;
}


signed main(){
	tez
	sdkfpoaksdfopkdsaopf
	sdoifjaoisdjfoaijsdfo
	asdoijfiopajsdfoajsdfoijafoij
}
