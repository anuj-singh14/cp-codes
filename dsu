struct dsu{
    int connected;
    vector<int> par, siz;

    dsu(int n){
        init(n);
    }

    void init(int n){
        connected = n;
        par.resize(n + 1);
        siz.resize(n + 1);
        for(int i = 1; i <= n; i++){   
            par[i] = i;
            siz[i] = 1;
        }
    }

    int find(int x){
        return par[x] = (par[x] == x) ? x : find(par[x]);
    }

    int size(int x){
        return siz[find(x)];
    }

    bool same(int x, int y){
        return find(x) == find(y);
    }

    void merge(int x, int y){
        x = find(x);
        y = find(y);
        if(x == y)  return;
        connected--;
        if(siz[x] < siz[y])   swap(x, y);
        par[y] = x;
        siz[x] += siz[y];
        siz[y] = 0;
    }
};
